from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import re
from openpyxl import Workbook
import multiprocessing as mp
from multiprocessing import Pool, Manager, Lock
import time
import os
from datetime import datetime

def setup_driver():
    """Thi·∫øt l·∫≠p driver Chrome"""
    options = Options()
    prefs = {"profile.managed_default_content_settings.images": 2}
    options.add_experimental_option("prefs", prefs)
    # options.add_argument("--headless")  # B·ªè comment n·∫øu mu·ªën ch·∫°y ·∫©n
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-gpu")
    options.add_argument("--window-size=1920,1080")
    
    driver = webdriver.Chrome(options=options)
    return driver

def crawl_batch(args):
    """H√†m crawl m·ªôt batch s·ªë b√°o danh"""
    sbd_list, process_id, shared_data, lock = args
    
    # Thi·∫øt l·∫≠p driver ri√™ng cho m·ªói process
    driver = setup_driver()
    wait = WebDriverWait(driver, 5)
    
    # T·∫°o workbook ri√™ng cho process
    wb = Workbook()
    ws = wb.active
    tieu_de = ["S·ªë b√°o danh", "H·ªç t√™n", "Ng√†y sinh"]
    ws.append(tieu_de)
    cac_mon = []
    record_count = 0
    
    print(f"üöÄ Process {process_id} b·∫Øt ƒë·∫ßu v·ªõi {len(sbd_list)} SBD")
    
    try:
        driver.get("https://diemthi.hcm.edu.vn/")
        
        for i, sbd in enumerate(sbd_list):
            try:
                # Nh·∫≠p SBD
                sbd_input = wait.until(EC.presence_of_element_located((By.ID, "SoBaoDanh")))
                sbd_input.clear()
                sbd_input.send_keys(sbd)

                # B·∫•m n√∫t t√¨m
                submit_btn = driver.find_element(By.CLASS_NAME, "g-recaptcha")
                submit_btn.click()

                # ƒê·ª£i k·∫øt qu·∫£
                try:
                    WebDriverWait(driver, 3).until(EC.presence_of_element_located((By.XPATH, "//table//tr[2]")))
                except:
                    print(f"‚è≠Ô∏è P{process_id}-{sbd}: Kh√¥ng c√≥ k·∫øt qu·∫£")
                    driver.get("https://diemthi.hcm.edu.vn/")
                    continue

                # L·∫•y d·ªØ li·ªáu
                rows = driver.find_elements(By.XPATH, "//table//tr")
                if len(rows) < 2:
                    print(f"P{process_id}-{sbd}: Kh√¥ng c√≥ d·ªØ li·ªáu")
                    driver.get("https://diemthi.hcm.edu.vn/")
                    continue

                cols = rows[1].find_elements(By.TAG_NAME, "td")
                if len(cols) < 3:
                    print(f"P{process_id}-{sbd}: Kh√¥ng ƒë·ªß c·ªôt")
                    driver.get("https://diemthi.hcm.edu.vn/")
                    continue

                ho_ten = cols[0].text.strip()
                ngay_sinh = cols[1].text.strip()
                ket_qua = cols[2].text.strip()

                # Ph√¢n t√≠ch ƒëi·ªÉm
                matches = re.findall(r'([A-Za-z√Ä-·ª∏√†-·ªπ\s]+):\s*([\d.]+)', ket_qua)
                diem_dict = {mon.strip(): diem for mon, diem in matches}

                # C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ m√¥n h·ªçc
                for mon in diem_dict:
                    if mon not in cac_mon:
                        cac_mon.append(mon)
                        col_index = len(tieu_de) + cac_mon.index(mon) + 1
                        ws.cell(row=1, column=col_index, value=mon)

                # Ghi d·ªØ li·ªáu
                row_data = [sbd, ho_ten, ngay_sinh]
                for mon in cac_mon:
                    row_data.append(diem_dict.get(mon, ""))

                ws.append(row_data)
                record_count += 1

                print(f"‚úÖ P{process_id}-{sbd}: {ho_ten} - {len(diem_dict)} m√¥n")

                # C·∫≠p nh·∫≠t progress v√†o shared data
                with lock:
                    shared_data['completed'] += 1
                    if shared_data['completed'] % 50 == 0:
                        print(f"üìä T·ªïng ti·∫øn ƒë·ªô: {shared_data['completed']}/{shared_data['total']}")

                # Ngh·ªâ ng·∫Øn ƒë·ªÉ tr√°nh spam
                time.sleep(0.5)
                driver.get("https://diemthi.hcm.edu.vn/")

            except Exception as e:
                print(f"‚ùå P{process_id}-{sbd}: L·ªói - {e}")
                driver.get("https://diemthi.hcm.edu.vn/")
                time.sleep(1)

    except Exception as e:
        print(f"‚ùå Process {process_id} g·∫∑p l·ªói nghi√™m tr·ªçng: {e}")
    
    finally:
        # L∆∞u file cho process n√†y
        if record_count > 0:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            file_name = f"diem_process_{process_id}_{timestamp}.xlsx"
            wb.save(file_name)
            print(f"üíæ Process {process_id} ƒë√£ l∆∞u {file_name} v·ªõi {record_count} b·∫£n ghi")
        
        driver.quit()
        return record_count

def split_list(lst, n):
    """Chia list th√†nh n ph·∫ßn b·∫±ng nhau"""
    k, m = divmod(len(lst), n)
    return [lst[i*k+min(i, m):(i+1)*k+min(i+1, m)] for i in range(n)]

def main():
    # C·∫•u h√¨nh
    START_NUM = 95000
    END_NUM = 98499
    NUM_PROCESSES = 2  # S·ªë ti·∫øn tr√¨nh song song
    
    print(f"üîß C·∫•u h√¨nh: {NUM_PROCESSES} ti·∫øn tr√¨nh, SBD t·ª´ 02{START_NUM:06d} ƒë·∫øn 02{END_NUM:06d}")
    
    # T·∫°o danh s√°ch SBD
    ds_sbd = [f"02{str(i).zfill(6)}" for i in range(START_NUM, END_NUM)]
    
    # Chia SBD th√†nh c√°c batch cho m·ªói process
    sbd_batches = split_list(ds_sbd, NUM_PROCESSES)
    
    # Shared data ƒë·ªÉ theo d√µi ti·∫øn ƒë·ªô
    manager = Manager()
    shared_data = manager.dict()
    shared_data['completed'] = 0
    shared_data['total'] = len(ds_sbd)
    lock = manager.Lock()
    
    # Chu·∫©n b·ªã arguments cho m·ªói process
    process_args = []
    for i, batch in enumerate(sbd_batches):
        process_args.append((batch, i+1, shared_data, lock))
    
    print(f"üìã Chia th√†nh {len(sbd_batches)} batch:")
    for i, batch in enumerate(sbd_batches):
        print(f"   Process {i+1}: {len(batch)} SBD ({batch[0]} -> {batch[-1]})")
    
    # Ch·∫°y ƒëa ti·∫øn tr√¨nh
    start_time = time.time()
    
    with Pool(processes=NUM_PROCESSES) as pool:
        results = pool.map(crawl_batch, process_args)
    
    end_time = time.time()
    
    # T·ªïng k·∫øt
    total_records = sum(results)
    duration = end_time - start_time
    
    print(f"""
    ‚úÖ HO√ÄN TH√ÄNH!
    ‚è∞ Th·ªùi gian: {duration:.2f} gi√¢y ({duration/60:.2f} ph√∫t)
    üìä T·ªïng b·∫£n ghi: {total_records}
    üöÄ T·ªëc ƒë·ªô trung b√¨nh: {total_records/duration:.2f} b·∫£n ghi/gi√¢y
    """)

if __name__ == "__main__":
    # Ki·ªÉm tra h·ªó tr·ª£ multiprocessing
    mp.set_start_method('spawn', force=True)  # Quan tr·ªçng tr√™n Windows
    main()